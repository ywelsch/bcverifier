package de.unikl.bcverifier.exceptionhandling;

public class Traces {

	public static String makeComment(String message) {
		return makeComment("",0,message);
	}

	public static String makeComment(String file, int line, String message) {
		return "#Trace|" + file + "|" + line + "|" + message;
	}
	
	public static class TraceComment {
		private final String file;
		private final int line;
		private final String message;
		private TraceComment(String file, int line, String message) {
			this.file = file;
			this.line = line;
			this.message = message;
		}
		
		
		
		public String getFile() {
			return file;
		}
		public int getLine() {
			return line;
		}
		public String getMessage() {
			return message;
		}



		@Override
		public String toString() {
			return "TraceComment [file=" + file + ", line=" + line
					+ ", message=" + message + "]";
		}

		@Override
		public int hashCode() { // generated by eclipse
			final int prime = 31;
			int result = 1;
			result = prime * result + ((file == null) ? 0 : file.hashCode());
			result = prime * result + line;
			result = prime * result
					+ ((message == null) ? 0 : message.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) { // generated by eclipse
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			TraceComment other = (TraceComment) obj;
			if (file == null) {
				if (other.file != null)
					return false;
			} else if (!file.equals(other.file))
				return false;
			if (line != other.line)
				return false;
			if (message == null) {
				if (other.message != null)
					return false;
			} else if (!message.equals(other.message))
				return false;
			return true;
		}
		
		
	}
	
	public static TraceComment parseComment(String comment) {
		String[] parts = comment.split("\\|");
		return new TraceComment(parts[1], Integer.parseInt(parts[2]), parts[3]);
	}

	public static boolean isTraceComment(String comment) {
		return comment.startsWith("#Trace");
	}

	
	
}
