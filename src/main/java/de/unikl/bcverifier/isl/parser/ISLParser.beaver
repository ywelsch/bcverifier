%header {:

package de.unikl.bcverifier.isl.parser;
import de.unikl.bcverifier.isl.ast.*;


:};


%embed {:
	private ArrayList<ParserError> errors = new ArrayList<ParserError>();

	public ArrayList<ParserError> getErrors() {
		return errors;
	}
	
	{ 
		// Use error handler in parser
		report = new Events(); 
	} 
	
	class Events extends Parser.Events {
		public void syntaxError(Symbol token) {
			SyntaxError e = new SyntaxError("Syntactic error: unexpected token " + Terminals.NAMES[token.getId()], Symbol.getLine(token.getStart()), Symbol.getColumn(token.getStart()), token);
            errors.add(e);
		}

		public void scannerError(Scanner.Exception e) {
			LexicalError err = new LexicalError("Lexical error: " + e.getMessage(), e.line, e.column);
			errors.add(err);
		}
		public void unexpectedTokenRemoved(Symbol token) {
			// do nothing
		}

		public void missingTokenInserted(Symbol token) {
			// do nothing
		}

		public void misspelledTokenReplaced(Symbol token) {
			// do nothing
		}

		public void errorPhraseRemoved(Symbol error) {
			// do nothing
		}
	}
	
	/** convert array to ast-list */
	private <T extends ASTNode<?>> List<T> list(T[] ar) {
		List<T> result = new List<T>();
		for (T t : ar) {
			result.add(t);
		}
		return result;
	}
	
	
:};


%terminals FORALL, EXISTS, TRUE, FALSE, INVALIDTOKEN, OLD, NEW, IDENTIFIER, INVARIANT, LOCAL,
	IN,
	PLACE, LINE, STALL, WITH, MEASURE, WHEN, CALL, OF, 
	IF, THEN, ELSE,
	DOT,
	MOD, MULT, DIV, PLUS, MINUS, LT, LTEQ, GT, GTEQ, NOT,
	EQUALS, UNEQUALS,
	COLONCOLON, COMMA, LPAREN, RPAREN, SEMI, EQ,
	IMPLIES, IFF, AND, OR, RELATED,
	INTLITERAL, NULL, INSTANCEOF, VAR, ASSIGN
;

// operator precedences, highest first
//%right NEW, OLD;
%left DOT;
%right NOT;
%left RELATED, INSTANCEOF; 
%left MOD, MULT, DIV;
%left PLUS, MINUS;
%left EQUALS, UNEQUALS, LT, LTEQ, GT, GTEQ;
%left AND;
%left OR;
%right IMPLIES;
%left IFF;
%left THEN;
%left EXISTS, FORALL;

%typeof id = "Ident";
%typeof vardefs = "List<VarDef>";
%typeof vardef = "VarDef";
%typeof expr = "Expr";
%typeof idlist = "List<Ident>";
%typeof typedef = "TypeDef";
%typeof cu = "CompilationUnit";
%typeof parameterlist = "List<Expr>";
%typeof nonEmptyParameterlist = "List<Expr>";
%typeof statement = "Statement";
%typeof placeposition = "ProgramPointExpr";
%typeof placecondition = "Opt<Expr>";
%typeof placemodifier = "PlaceModifier";
%typeof stallcondition = "Opt<StallCondition>";
%typeof measure = "Opt<Expr>";
%typeof placeoptions = "List<Ident>";
%typeof assign = "Assign";

%goal cu;

cu = 
	  statement.s* 
		{: return new CompilationUnit(list(s)); :} 
	| INVALIDTOKEN.t
    	{: return null; :}
;

statement = 
	  INVARIANT expr.e SEMI
		{: return new Invariant(new List(), e); :}
	| LOCAL INVARIANT expr.e SEMI
		{: return new Invariant(new List().add(new InvariantModifierLocal()), e); :}
	| placedef.p
	| VAR vardef.v EQ expr.e SEMI
		{: return new GlobVarDef(v, e); :}
	| assign.a SEMI
;

assign =
	ASSIGN id.i EQ expr.e
		{: return new Assign(new VarAccess(i), e); :}	
;

placedef =	
	placemodifier.m PLACE id.i EQ placeposition.pos placecondition.cond stallcondition.stallcond assign.a* placeoptions.opts SEMI
		{: return new PlaceDef(m, opts, i, pos, cond , stallcond, list(a)); :}
;

placemodifier =
	  LOCAL 
	  	{: return new PlaceModifierLocal(); :}
	| 		// no modifier = predefined place
		{: return new PlaceModifierPredefined(); :}
;

placeoptions =
	  id.i
		{: return new List().add(i); :} 
	|
		{: return new List(); :}  
;	

placeposition = 
	  LINE INTLITERAL.lineNr OF typedef.t 
	  	{: return new LineNrProgramPoint(t, Integer.parseInt((String)lineNr.value)); :}
	| CALL id.f IN LINE INTLITERAL.lineNr OF typedef.t 
	  	{: return new CallProgramPoint(f, t, Integer.parseInt((String)lineNr.value)); :}
;

placecondition = 
	WHEN expr.cond
		{: return new Opt<Expr>(cond); :}
	| 
		{: return new Opt<Expr>(); :}
;

stallcondition = 
    STALL WHEN expr.cond measure.ms
 		{: return new Opt<StallCondition>(new StallCondition(cond, ms)); :}
    |
		{: return new Opt<StallCondition>(); :}
;
		
measure =
    WITH MEASURE expr.measure
 		{: return new Opt<Expr>(measure); :}
    |
		{: return new Opt<Expr>(); :}
;

expr =
      EXISTS vardefs.v COLONCOLON expr.e
      	{: return new QExpr(Quantifier.EXISTS,v,e); :}
    | FORALL vardefs.v COLONCOLON expr.e
      	{: return new QExpr(Quantifier.FORALL,v,e); :}
    | TRUE  
    	{: return new BoolConst(true); :}
    | FALSE 
    	{: return new BoolConst(false); :}
    | INTLITERAL.i
    	{: return new IntConst(i); :}
    | NULL
    	{: return new NullConst(); :}
    | OLD 
    	{: return new VersionConst(Version.OLD); :}
    | NEW 
    	{: return new VersionConst(Version.NEW); :}
    | OLD id.i 
    	{: return new ExprTypeRef(Version.OLD, i); :}
    | NEW id.i
    	{: return new ExprTypeRef(Version.NEW, i); :}
    | id.i
    	{: return new VarAccess(i); :}
    | id.f LPAREN parameterlist.p RPAREN
    	{: return new FuncCall(f, p); :} 
    | expr.left DOT id.right
    	{: return new MemberAccess(left, right); :}
    | expr.left RELATED expr.right
    	{: return new BinaryOperation(BinaryOperator.RELATED, left, right); :}
    | expr.left INSTANCEOF expr.right
    	{: return new InstanceofOperation(left, right); :}	
    | expr.left IMPLIES expr.right
    	{: return new BinaryOperation(BinaryOperator.IMPLIES, left, right); :}
    | expr.left IFF expr.right
    	{: return new BinaryOperation(BinaryOperator.IFF, left, right); :}
    | expr.left AND expr.right
    	{: return new BinaryOperation(BinaryOperator.AND, left, right); :}
    | expr.left OR expr.right
    	{: return new BinaryOperation(BinaryOperator.OR, left, right); :}
    | expr.left PLUS expr.right
    	{: return new BinaryOperation(BinaryOperator.PLUS, left, right); :}
    | expr.left MINUS expr.right
    	{: return new BinaryOperation(BinaryOperator.MINUS, left, right); :}
    | expr.left MULT expr.right
    	{: return new BinaryOperation(BinaryOperator.MULT, left, right); :}
    | expr.left DIV expr.right
    	{: return new BinaryOperation(BinaryOperator.DIV, left, right); :}
    | expr.left MOD expr.right
    	{: return new BinaryOperation(BinaryOperator.MOD, left, right); :}
    | expr.left EQUALS expr.right
    	{: return new BinaryOperation(BinaryOperator.EQUALS, left, right); :}
    | expr.left UNEQUALS expr.right
    	{: return new BinaryOperation(BinaryOperator.UNEQUALS, left, right); :}
    | expr.left LT expr.right
    	{: return new BinaryOperation(BinaryOperator.LT, left, right); :}
    | expr.left LTEQ expr.right
    	{: return new BinaryOperation(BinaryOperator.LTEQ, left, right); :}
    | expr.left GT expr.right
    	{: return new BinaryOperation(BinaryOperator.GT, left, right); :}
    | expr.left GTEQ expr.right
    	{: return new BinaryOperation(BinaryOperator.GTEQ, left, right); :}
    | NOT expr.e
    	{: return new UnaryOperation(UnaryOperator.NOT, e); :}
    | MINUS expr.e
    	{: return new UnaryOperation(UnaryOperator.UMINUS, e); :}
    | IF expr.cond THEN expr.e1 ELSE expr.e2
    	{: return new IfThenElse(cond, e1, e2); :}
    | LPAREN expr.e RPAREN
;




parameterlist =
	  nonEmptyParameterlist
	| 
		{: return new List<Expr>(); :}
;

nonEmptyParameterlist = 
	  expr.e 
	  	{: return new List().add(e); :}
	| nonEmptyParameterlist.es COMMA expr.e
		{: return es.add(e); :}
;


 vardefs =
 	  vardef.v 
 	  	{: return new List().add(v); :}
 	| vardefs.vs COMMA vardef.v 
 		{: return vs.add(v); :}
 ;
 
 vardef = 
 	  typedef.t id.n 
 	  	{: return new VarDef(t, n); :}
;

typedef = 
	  OLD idlist.n
		{: return new NamedTypeDef(Version.OLD, n); :}
	| NEW idlist.n
		{: return new NamedTypeDef(Version.NEW, n); :}
	| idlist.n
		{: return new NamedTypeDef(Version.BOTH, n); :}
;

idlist =
	  id.i 
 	  	{: return new List().add(i); :}
 	| idlist.is DOT id.i 
 		{: return is.add(i); :}
;

id = 
	IDENTIFIER.i
		{: return new Ident(i); :}
;

 	   