import de.unikl.bcverifier.isl.ast.translation.*;
import b2bpl.bpl.ast.BPLExpression;


aspect translate {
	
	syn BPLExpression Expr.translateExpr();
	
	eq BinaryOperation.translateExpr() = ExprTranslation.translate(this);
	eq UnaryOperation.translateExpr() = ExprTranslation.translate(this);
	eq BoolConst.translateExpr() = ExprTranslation.translate(this);
	eq IntConst.translateExpr() = ExprTranslation.translate(this);
	eq NullConst.translateExpr() = ExprTranslation.translate(this);
	eq ErrorExpr.translateExpr() = ExprTranslation.translate(this);
	eq ForallExpr.translateExpr() = ExprTranslation.translate(this);
	eq FuncCall.translateExpr() = ExprTranslation.translate(this);
	eq IfThenElse.translateExpr() = ExprTranslation.translate(this);
	eq MemberAccess.translateExpr() = ExprTranslation.translate(this);
	eq VarAccess.translateExpr() = ExprTranslation.translate(this);
	

	public java.util.List<BPLExpression> CompilationUnit.translate() {
		ArrayList<BPLExpression> result = new ArrayList<BPLExpression>();
		for (Statement s: getStatements()) {
			if (s instanceof Invariant) {
				Invariant invariant = (Invariant) s;
				result.add(invariant.getExpr().translateExpr());
			}
		}
		return result;
	}
}