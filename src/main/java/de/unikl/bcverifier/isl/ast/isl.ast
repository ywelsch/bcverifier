CompilationUnit ::= Statement*;

// Expressions:

abstract Expr;

ForallExpr: Expr ::= BoundVar:VarDef* Expr;

VarAccess: Expr ::= Name:Ident;

MemberAccess: Expr ::= Left:Expr Right:Ident;

FuncCall : Expr ::= FuncName:Ident Argument:Expr*;

BinaryOperation : Expr ::= <Operator:de.unikl.bcverifier.isl.parser.BinaryOperator> Left:Expr Right:Expr;
UnaryOperation : Expr ::= <Operator:de.unikl.bcverifier.isl.parser.UnaryOperator> Expr;

IfThenElse : Expr ::= Cond:Expr ThenExpr:Expr ElseExpr:Expr;

ErrorExpr : Expr ::= <Message>;

// constant expressions:
BoolConst : Expr ::= <Val:boolean>;
IntConst : Expr ::= <Val>;
NullConst : Expr ::=;


// Variable definitions:
abstract Def;

UnknownDef : Def ::= ;
VarDef : Def ::= TypeDef Name:Ident;

// Statements:
abstract Statement : Def;

Invariant : Statement ::= Expr;
LocalInvariant: Statement ::= Expr; 
PlaceDef: Statement ::= Name:Ident ProgramPoint:ProgramPointExpr [Condition:Expr] [TerminationMeasure:Expr];
ProgramPoint: Statement ::= Name:Ident ProgramPointExpr;

abstract ProgramPointExpr;

LineNrProgramPoint: ProgramPointExpr ::= TypeDef <ProgramLineNr:int>;
CallProgramPoint: LineNrProgramPoint ::= FunctionName:Ident TypeDef <ProgramLineNr:int>;


abstract PlaceModifier;
PlaceModifierLocal: PlaceModifier ::= ;
PlaceModifierPredefined: PlaceModifier ::= ;

// Types

abstract TypeDef;

NamedTypeDef : TypeDef ::= <Version:Version> Name:Ident*;



  
// other stuff:

Ident ::= <Name>;