apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'application'

version = '0.0.1-SNAPSHOT'
description = 'BCVerifier -- A Backward Compatibility Verifier for Java Libraries'

defaultTasks 'classes'

String astPackage = "de.unikl.bcverifier.isl.ast"
String islGenDir = "$projectDir/src/gen/java"
String parserSrcDir = "$projectDir/src/main/java/de/unikl/bcverifier/isl/parser"
String parserGenDir = "$islGenDir/de/unikl/bcverifier/isl/parser"
String astGenDir = "$islGenDir/de/unikl/bcverifier/isl/ast"
String srcDocDir = "$projectDir/doc"
String destDocDir = "$buildDir/doc"
int docOptions = org.pegdown.Extensions.AUTOLINKS | org.pegdown.Extensions.WIKILINKS | org.pegdown.Extensions.SMARTYPANTS

configurations {
    sshAntTask
	beaverTask
	jflexTask
	jastaddTask
}

repositories {
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/snapshots/"
    }
	ivy {
		artifactPattern "http://jastadd.org/releases/[module]/[revision]/[artifact].jar"
		artifactPattern "http://download.eclipse.org/eclipse/updates/3.8/R-3.8.1-201209141540/plugins/[artifact]_[revision].jar"
	}
}

buildscript {
  repositories {
    mavenCentral()
    maven {
      url "http://scala-tools.org/repo-releases"
    }
  }
  dependencies {
    classpath group: 'org.pegdown', name: 'pegdown', version: '1.1.0'
  }
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.2'
    compile group: 'org.apache.commons', name: 'commons-vfs2', version: '2.0'
    compile group: 'org.apache.wicket', name: 'wicket-core', version: '6.3.0'
    compile group: 'org.apache.wicket', name: 'wicket-extensions', version: '6.3.0'
    compile group: 'org.eclipse.jetty.aggregate', name: 'jetty-all-server', version: '7.5.0.v20110901'
    compile group: 'asm', name: 'asm', version: '3.3.1'
    compile group: 'asm', name: 'asm-tree', version: '3.3.1'
    compile group: 'asm', name: 'asm-util', version: '3.3.1'
    compile group: 'asm', name: 'asm-analysis', version: '3.3.1'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.6.2'
    compile group: 'log4j', name: 'log4j', version: '1.2.16'
	compile group: 'net.sf.beaver', name: 'beaver-rt', version: '0.9.10'
	beaverTask group: 'net.sf.beaver', name: 'beaver-ant', version: '0.9.10'
	jflexTask group: 'de.jflex', name: 'jflex', version: '1.4.3'
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '0.4.0'
    testCompile group: 'org.testng', name: 'testng', version: '6.7'
    compile group: 'com.beust', name: 'jcommander', version: '1.25'
    compile group: 'com.google.guava', name: 'guava-io', version: 'r03'
    compile group: 'com.google.guava', name: 'guava-collections', version: 'r03'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    sshAntTask group: 'org.apache.ant', name: 'ant-jsch', version: '1.8.4'
	jastaddTask group: 'jastadd2', name: 'jastadd2', version: 'R20121112'
	compile group: 'org.ostermiller', name: 'utils', version: '1.07.00'
	compile name: 'org.eclipse.core.contenttype', version: '3.4.200.v20120523-2004'
	compile name: 'org.eclipse.core.jobs', version: '3.5.200.v20120521-2346'
	compile name: 'org.eclipse.core.resources', version: '3.8.1.v20120802-154922'
	compile name: 'org.eclipse.core.runtime', version: '3.8.0.v20120521-2346'
	compile name: 'org.eclipse.equinox.common', version: '3.6.100.v20120522-1841'
	compile name: 'org.eclipse.equinox.preferences', version: '3.5.0.v20120522-1841'
	compile name: 'org.eclipse.jdt.core', version: '3.8.2.v20120814-155456'
	compile name: 'org.eclipse.jdt.ui', version: '3.8.1.v20120814-144251'
	compile name: 'org.eclipse.osgi', version: '3.8.1.v20120830-144521'
}

test {
  useTestNG()
  options.suites("build/resources/test/testng.xml")
}

task doc {
  inputs.files{fileTree(dir: srcDocDir, includes: ['**/*.markdown','**/*.mdown'])}
  outputs.dir(destDocDir)

  doLast {
    new File(destDocDir).mkdirs();
    inputs.files.each{ source ->
         def mp = new org.pegdown.PegDownProcessor(docOptions)
       def relrenamed = new File(srcDocDir).toURI().relativize(source.toURI()).getPath().replaceFirst('(markdown|mdown)$', 'html')
       def target = new File(new File(destDocDir), relrenamed)
       target.getParentFile().mkdirs();
         target.text = new File(srcDocDir + "/assets/template.html").text.replace("{{{content}}}", mp.markdownToHtml(source.text));
    }
  }
}

applicationDistribution.from(doc) {
    into "doc"
}
applicationDistribution.from("examples") {
  into "examples"
}

task copyDocAssets(type:Copy) {
  from (srcDocDir + "/assets") {
    include '**/*.js'
    include '**/*.css'
    include '**/*.png'
	include '**/*.pdf'
  }
  from ('src/main/webapp/') {
    include '**/*.woff'
    include '**/*.css'
  }
  into (destDocDir + "/assets")
}

doc.dependsOn copyDocAssets

task docReadme {
  def readme = file("$projectDir/README")
  inputs.file(readme)
  outputs.dir(destDocDir)
  doLast {
    new File(destDocDir).mkdirs();
    def mp = new org.pegdown.PegDownProcessor(docOptions)
      def target = new File(destDocDir, 'readme.html')
      target.text = new File(srcDocDir + "/assets/template.html").text.replace("{{{content}}}", mp.markdownToHtml(readme.text));
  }
}

doc.dependsOn docReadme

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir islGenDir
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
            srcDir 'examples'  //TODO Auslagern in webLibraries Verzeichnis
        }
    }
}

mainClassName = "de.unikl.bcverifier.Main"

startScripts {
  applicationName = "bcv"
}

war {
  archiveName = 'bcverifier.war'
  from(destDocDir) {
    include '**/*'
  }
}

war.dependsOn doc

task uploadWar1 {
  description = 'Deploy war to remote Tomcat server on welsch.lu.'
  dependsOn war
  doLast {
    ant.taskdef(name: 'sshexec', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec', classpath: configurations.sshAntTask.asPath)
    ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp', classpath: configurations.sshAntTask.asPath)
    ant.sshexec(host: 'welsch.lu', username: 'yoz', port: '54321', keyfile: '${user.home}/.ssh/id_rsa', command: '/bin/bash -l /home/yoz/bcverifier/tomcat/bin/catalina.sh stop', verbose: 'true')
    ant.sshexec(host: 'welsch.lu', username: 'yoz', port: '54321', keyfile: '${user.home}/.ssh/id_rsa', command: 'rm -rf /home/yoz/bcverifier/tomcat/webapps/bcverifier*', verbose: 'true')
    ant.scp(todir: 'yoz@welsch.lu:~/bcverifier/tomcat/webapps', port: '54321', file: war.archivePath.path, keyfile: '${user.home}/.ssh/id_rsa')
    ant.sshexec(host: 'welsch.lu', username: 'yoz', port: '54321', keyfile: '${user.home}/.ssh/id_rsa', command: '/bin/bash -l /home/yoz/bcverifier/tomcat/bin/catalina.sh start', verbose: 'true')
  }
}

task uploadWar2 {
  description = 'Deploy war to remote Tomcat server on Byron.'
  dependsOn war
  doLast {
    ant.taskdef(name: 'sshexec', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec', classpath: configurations.sshAntTask.asPath)
    ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp', classpath: configurations.sshAntTask.asPath)
    ant.sshexec(host: 'byron', username: '${user.name}', keyfile: '${user.home}/.ssh/id_rsa', command: '/usr/bin/sudo /etc/init.d/tomcat6 stop', verbose: 'true')
    ant.sshexec(host: 'byron', username: '${user.name}', keyfile: '${user.home}/.ssh/id_rsa', command: 'rm -rf /var/lib/tomcat6/webapps/bcverifier*', verbose: 'true')
    ant.scp(todir: '${user.name}@byron:/var/lib/tomcat6/webapps', file: war.archivePath.path, keyfile: '${user.home}/.ssh/id_rsa')
    ant.sshexec(host: 'byron', username: '${user.name}', keyfile: '${user.home}/.ssh/id_rsa', command: '/usr/bin/sudo /etc/init.d/tomcat6 start', verbose: 'true')
  }
}

def getHGRevision = {
  def res = ""
  try {
  new ByteArrayOutputStream().withStream { os ->
    def result = exec {
      executable = 'hg'
      args = ['parent', '--template', '"rev.{rev} ({date|shortdate})"']
      standardOutput = os
    }
    res = os.toString().replaceAll (/"/, '')
    }
  } catch (Exception e) {}
  return res
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
  def hgrevision = getHGRevision()
  inputs.property('hgrevision', hgrevision)
  from('src/main/resources/project.properties') {
    filter(ReplaceTokens, tokens: [version: hgrevision])
  }
}

processTestResources {
  def numProcessors = Math.max(Runtime.getRuntime().availableProcessors() - 2, 1)
  inputs.property('numProcessors', numProcessors)
  from('src/test/resources/testng.xml') {
    filter(ReplaceTokens, tokens: [threadcount: numProcessors.toString()])
  }
}

httpPort = 60602

eclipse {
  project {
    name = 'BCVerifier'
    natures 'com.springsource.sts.gradle.core.nature', 'org.eclipse.jdt.groovy.core.groovyNature'
    comment = description
  }
    classpath {
        //customizing the classes output directory:
        defaultOutputDir = file('build-eclipse')

    containers 'com.springsource.sts.gradle.classpathcontainer', 'com.springsource.sts.gradle.dsld.classpathcontainer', 'GROOVY_DSL_SUPPORT'

    //minusConfigurations += configurations.compile
    //minusConfigurations += configurations.testCompile
        //default settings for dependencies sources/javadoc download:
        downloadSources = true
        downloadJavadoc = false
    }
}

task runJastAdd {
    inputs.files{fileTree(dir: "$projectDir/src/main/java", includes: ['**/*.ast', '**/*.jrag', '**/*.jadd'])}
    outputs.dir(astGenDir)
    doLast {
        ant.taskdef name: 'jastadd', classname: 'jastadd.JastAddTask', classpath: configurations.jastaddTask.asPath
        new File(islGenDir).mkdirs()
        ant.jastadd(package: astPackage, rewrite: 'true', beaver: 'true', novisitcheck: 'true', outdir: islGenDir, debug: 'true') {
            fileset(dir: "$projectDir/src/main/java") {
                include name: '**/*.ast'
                include name: '**/*.jrag'
                include name: '**/*.jadd'
            }
        }
    }
}

task runBeaver {
    String beaverFile = "$parserSrcDir/ISLParser.beaver"
    inputs.file(beaverFile)
    outputs.files("$parserGenDir/ISLParser.java", "$parserGenDir/ISLParser.stat")
    doLast {
        ant.taskdef name: 'beaver', classname: 'beaver.comp.run.AntTask', classpath: configurations.beaverTask.asPath
        new File(parserGenDir).mkdirs()
        ant.beaver(file: beaverFile, destdir: parserGenDir, terminalNames: 'yes', compress: 'no', useSwitch: 'yes', reportActions: 'yes')
    }
}

task runJFlex {
    String flexFile = "$parserSrcDir/isl.flex"
    inputs.file(flexFile)
    outputs.file("$parserGenDir/ISLScanner.java")
    doLast {
        ant.taskdef name: 'jflex', classname: 'JFlex.anttask.JFlexTask', classpath: configurations.jflexTask.asPath
        ant.jflex(file: flexFile, outdir: parserGenDir)
    }
}

task generateSources

generateSources.dependsOn runJastAdd
generateSources.dependsOn runBeaver
generateSources.dependsOn runJFlex

compileJava.dependsOn generateSources

task runSingleTest(type: JavaExec) {
  main = "de.unikl.bcverifier.SingleTestRunner"
  classpath = project.sourceSets.main.runtimeClasspath
  if (project.hasProperty("test")){
    args test
  }
}
runSingleTest.dependsOn classes

[jettyRun, jettyRunWar].each { jetty ->
	jetty.connectors = configure(jetty.class.classLoader.loadClass('org.mortbay.jetty.nio.SelectChannelConnector').newInstance()) {
		port = httpPort
		maxIdleTime = 300000 // 5 minutes
	}
}

task removeGenFolder(type: Delete) {
    delete islGenDir
}

task removeGeneratedLibraryFiles(type: Delete) {
	delete fileTree(dir: "examples", includes: ['**/*.class', '**/*.output*.bpl', '**/boogie_output.txt'])
}

clean.dependsOn removeGenFolder
clean.dependsOn removeGeneratedLibraryFiles
assemble.dependsOn jar
tasks.eclipse.dependsOn cleanEclipse